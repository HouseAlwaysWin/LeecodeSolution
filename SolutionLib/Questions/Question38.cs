using SolutionLib.Tools;

namespace SolutionLib.Questions {
    public class Question38 : IQuestion {
        /*
        The count-and-say sequence is the sequence of integers with the first five terms as following:

        1.     1
        2.     11
        3.     21
        4.     1211
        5.     111221
        1 is read off as "one 1" or 11.
        11 is read off as "two 1s" or 21.
        21 is read off as "one 2, then one 1" or 1211.

        Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.

        Note: Each term of the sequence of integers will be represented as a string.

        

        Example 1:

        Input: 1
        Output: "1"

        Example 2:

        Input: 4
        Output: "1211"

        You start with "1" as the first line.

        Each subsequent line (n) is generated by passing the line before it (n - 1) as an input to a somewhat unusual function (I'll explain as brute-force for illustrative purposes):

        Loop through the line (n - 1) as a string. For a given character, count how many consecutive times it repeats, then put that on line n followed by the number.

        For example:

        If you have "1", the next line is "11".
        If you have "11", the next line is "21".
        If you have "111", the next line is "31".
        If you have "1111", the next line is "41".
        See the basic pattern? Just do that for every set of repeating characters on the previous line.
        Here's what it looks like with more than one sequence:

        If you have "11222", the next line is "2132" ("11" becomes "21" and "222" becomes "32").
        If you have "112225", the next line is "213215" ("11" becomes "21", "222" becomes "32", and "5" becomes "15").
        In terms of the sequence dictated by the description, here's the first 15 lines of output (done by hand but I don't think I made any errors):

        "1"
        "11"
        "21"
        "1211"
        "111221"
        "312211"
        "13112221"
        "1113213211"
        "31131211131221"
        "13211311123113112211"
        "11131221133112132113212221"
        "3113112221232112111312211312113211"
        "1321132132111213122112311311222113111221131221"
        "11131221131211131231121113112221121321132132211331222113112211"
        "311311222113111231131112132112311321322112111312211312111322212311322113212221"
         */
        public void Run () {
            int n = 2;
            System.Console.WriteLine ("V1:");
            WatchDog.ShowPerformance (CountAndSay, n);
        }

        public string CountAndSay (int n) {
            int index = 0;
            string str = string.Empty;
            while (index < n) {
                for (int i = 0; i < str.Length; i++) {

                }
            }
            return str;
        }

    }
}